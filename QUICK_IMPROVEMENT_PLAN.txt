╔════════════════════════════════════════════════════════════════════════════╗
║              TimeMixer 快速改进行动计划                                     ║
╚════════════════════════════════════════════════════════════════════════════╝

【📊 当前状态】
最佳模型: v2 (step50_bs16)
测试损失: 0.390
问题: 仍有过拟合（差距0.236）

╔════════════════════════════════════════════════════════════════════════════╗
║ 🎯 今天立即可做的3个改进（按优先级）                                       ║
╚════════════════════════════════════════════════════════════════════════════╝

┌────────────────────────────────────────────────────────────────────────────┐
│ 1️⃣  优化v2模型 (预期提升5-8%, 时间30分钟)                    ⭐⭐⭐⭐⭐│
├────────────────────────────────────────────────────────────────────────────┤
│ python scripts/train_sliding_window.py \                                  │
│   --model_id slide_v2_optimized \                                         │
│   --input_len 3000 \                                                      │
│   --output_len 1000 \                                                     │
│   --step_len 50 \                                                         │
│   --batch_size 16 \                                                       │
│   --d_model 192 \          ← 从256降到192（降低25%）                      │
│   --n_heads 12 \           ← 从16降到12                                   │
│   --e_layers 4 \           ← 从6降到4                                     │
│   --d_layers 2 \           ← 保持2                                        │
│   --d_ff 768 \             ← 从1024降到768                                │
│   --dropout 0.15 \         ← 从0.1提升到0.15                              │
│   --learning_rate 8e-5 \                                                  │
│   --patience 20 \                                                         │
│   --train_epochs 80 \                                                     │
│   --use_gpu                                                               │
│                                                                            │
│ 预期结果: 测试损失 0.35-0.37                                               │
└────────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────────────┐
│ 2️⃣  训练3个模型准备集成 (预期提升5-10%, 时间并行1小时)      ⭐⭐⭐⭐⭐│
├────────────────────────────────────────────────────────────────────────────┤
│ # 在3个不同终端窗口运行:                                                   │
│                                                                            │
│ # 终端1 - 基于v2的原始配置                                                 │
│ python scripts/train_sliding_window.py \                                  │
│   --model_id ensemble_model1 \                                            │
│   --input_len 3000 --output_len 1000 --step_len 50 \                     │
│   --batch_size 16 --train_epochs 60 --use_gpu                            │
│                                                                            │
│ # 终端2 - 轻微降低复杂度                                                   │
│ python scripts/train_sliding_window.py \                                  │
│   --model_id ensemble_model2 \                                            │
│   --input_len 3000 --output_len 1000 --step_len 50 \                     │
│   --batch_size 16 --d_model 192 --n_heads 12 --e_layers 4 \              │
│   --dropout 0.15 --train_epochs 60 --use_gpu                             │
│                                                                            │
│ # 终端3 - 更保守的配置                                                     │
│ python scripts/train_sliding_window.py \                                  │
│   --model_id ensemble_model3 \                                            │
│   --input_len 3000 --output_len 1000 --step_len 50 \                     │
│   --batch_size 16 --d_model 128 --n_heads 8 --e_layers 3 \               │
│   --dropout 0.2 --train_epochs 60 --use_gpu                              │
│                                                                            │
│ 然后创建集成测试脚本（稍后提供代码）                                        │
└────────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────────────┐
│ 3️⃣  尝试不同学习率 (预期提升2-5%, 时间30分钟)              ⭐⭐⭐⭐  │
├────────────────────────────────────────────────────────────────────────────┤
│ python scripts/train_sliding_window.py \                                  │
│   --model_id slide_v2_lr5e5 \                                             │
│   --input_len 3000 --output_len 1000 --step_len 50 \                     │
│   --batch_size 16 --learning_rate 5e-5 \    ← 更低的学习率                │
│   --patience 20 --train_epochs 80 --use_gpu                              │
└────────────────────────────────────────────────────────────────────────────┘

╔════════════════════════════════════════════════════════════════════════════╗
║ 📅 本周可完成的改进（选做）                                                ║
╚════════════════════════════════════════════════════════════════════════════╝

4️⃣  添加L2正则化 (预期提升2-3%)
   - 修改 exp/exp_long_term_forecasting.py
   - 在 _select_optimizer 中添加 weight_decay=1e-5

5️⃣  尝试更稳定的学习率策略 (预期提升3-5%)
   - 修改训练脚本使用CosineAnnealingWarmRestarts

6️⃣  数据增强 (预期提升3-5%)
   - 在训练时添加噪声注入
   - 实施时间窗口抖动

7️⃣  改进损失函数 (预期提升3-7%)
   - 加权MAE：对远期预测权重更高
   - 组合损失：MAE + MSE + 趋势损失

8️⃣  特征工程 (预期提升5-15%)
   - 添加时间特征（星期、月份等）
   - 添加统计特征（均值、标准差、趋势）

╔════════════════════════════════════════════════════════════════════════════╗
║ 🎯 预期最终效果                                                            ║
╚════════════════════════════════════════════════════════════════════════════╝

当前最佳:        0.390
方案1 单模型:    0.35-0.37  (提升5-8%)
方案2 3模型集成: 0.33-0.35  (额外提升5-10%)
所有方法组合:    0.30-0.33  (总提升15-30%)

╔════════════════════════════════════════════════════════════════════════════╗
║ 💡 关键建议                                                                ║
╚════════════════════════════════════════════════════════════════════════════╝

1. 不要过度降低模型容量
   v2证明了大模型（d_model=256）效果好
   只需轻微降低到192即可

2. 集成学习是最稳妥的提升
   几乎零风险，5-10%提升有保证

3. 优先保证训练稳定性
   宁愿牺牲1%性能换取平滑的训练曲线

4. 渐进式改进
   每次只改一个变量，记录效果

╔════════════════════════════════════════════════════════════════════════════╗
║ 📊 实验记录表格（建议维护）                                                ║
╚════════════════════════════════════════════════════════════════════════════╝

实验ID       | d_model | dropout | lr    | 测试损失 | 差距  | 备注
-------------|---------|---------|-------|---------|-------|------------------
v2_baseline  | 256     | 0.1     | 1e-4  | 0.390   | 0.236 | 当前最佳
v2_optimized | 192     | 0.15    | 8e-5  | ?       | ?     | 今天测试
v2_lr5e5     | 256     | 0.1     | 5e-5  | ?       | ?     | 低学习率
ensemble     | -       | -       | -     | ?       | ?     | 3模型集成

╔════════════════════════════════════════════════════════════════════════════╗
║ 🚀 立即行动                                                                ║
╚════════════════════════════════════════════════════════════════════════════╝

优先级排序:
1. 立即运行方案1（最快见效）
2. 同时运行方案2的3个模型（并行训练）
3. 明天开始实施L2正则化和数据增强

完整详细文档: 查看 ADVANCED_IMPROVEMENTS.md

祝训练顺利！🎉
